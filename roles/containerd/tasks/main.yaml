- name: Check if containerd is installed
  ansible.builtin.command: containerd --version
  register: containerd_check
  failed_when: false
  changed_when: false

- name: Download containerd archive
  ansible.builtin.get_url:
    url: '{{ containerd_download_url }}'
    dest: /tmp/
    mode: '0664'
  register: download_archive
  when: containerd_check.rc != 0

- name: Unarchive containerd archive
  ansible.builtin.unarchive:
    src: '{{ containerd_archive_path }}'
    dest: /usr/local
    remote_src: true
  when: download_archive is changed
  become: true

- name: Create an unit file directory
  ansible.builtin.file:
    path: '{{ containerd_systemd_path }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  register: containerd_service

- name: Download containerd systemd unit file
  ansible.builtin.get_url:
    url: '{{ containerd_systemd_unit_url }}'
    dest: '{{ containerd_systemd_path }}'
    mode: '0644'
  become: true
  register: download_containerd_service_file
  when: containerd_service is changed

- name: Ensure containerd service is enable and running
  ansible.builtin.systemd_service:
    daemon-reload: true
    name: containerd
    enabled: true
    state: started
  become: true
  register: start_containerd
  when: download_containerd_service_file is skipped

- name: Create a config directory
  ansible.builtin.file:
    path: '{{ containerd_config_directory }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  register: containerd_config

- name: Standard out default config
  ansible.builtin.command: containerd config default
  changed_when: false
  register: stdout_default_config
  when:
    - start_containerd is succeeded
    - containerd_config is changed

- name: Create a default config file
  ansible.builtin.copy:
    content: "{{ stdout_default_config.stdout }}"
    dest: '{{ containerd_config_path }}'
    owner: root
    group: root
    mode: '0644'
  become: true
  when: stdout_default_config is not skipped

- name: Configure systemd cgroup driver
  ansible.builtin.lineinfile:
    path: '{{ containerd_config_path }}'
    regexp: 'SystemdCgroup = true'
    insertafter: "^\\s*\\[plugins\\.\\'io\\.containerd\\.cri\\.v1\\.runtime\\'\\.containerd\\.runtimes\\.runc\\.options\\]"
    line: '            SystemdCgroup = true'
    state: present
  become: true
  register: configure_systemd_cgroup_driver

- name: Restart containerd service
  ansible.builtin.systemd_service:
    name: containerd
    state: restarted
  become: true
  when: configure_systemd_cgroup_driver is changed
